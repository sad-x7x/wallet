{"version":3,"file":"477.473346bae74b64f8b62c.js","mappings":"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","sources":["webpack://mytonwallet/./node_modules/@capgo/native-audio/dist/esm/audio-asset.js","webpack://mytonwallet/./node_modules/@capgo/native-audio/dist/esm/web.js"],"sourcesContent":["export class AudioAsset {\n    constructor(audio) {\n        this.audio = audio;\n    }\n}\n//# sourceMappingURL=audio-asset.js.map","import { WebPlugin } from \"@capacitor/core\";\nimport { AudioAsset } from \"./audio-asset\";\nexport class NativeAudioWeb extends WebPlugin {\n    constructor() {\n        super();\n    }\n    async resume(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        if (audio.paused) {\n            return audio.play();\n        }\n    }\n    async pause(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        return audio.pause();\n    }\n    async getCurrentTime(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        return { currentTime: audio.currentTime };\n    }\n    async getDuration(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        if (Number.isNaN(audio.duration)) {\n            throw \"no duration available\";\n        }\n        if (!Number.isFinite(audio.duration)) {\n            throw \"duration not available => media resource is streaming\";\n        }\n        return { duration: audio.duration };\n    }\n    async configure(options) {\n        throw `configure is not supported for web: ${JSON.stringify(options)}`;\n    }\n    async isPreloaded(options) {\n        try {\n            return { found: !!this.getAudioAsset(options.assetId) };\n        }\n        catch (e) {\n            return { found: false };\n        }\n    }\n    async preload(options) {\n        var _a;\n        if (NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.has(options.assetId)) {\n            throw \"AssetId already exists. Unload first if like to change!\";\n        }\n        if (!((_a = options.assetPath) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw \"no assetPath provided\";\n        }\n        if (!options.isUrl &&\n            !new RegExp(\"^/?\" + NativeAudioWeb.FILE_LOCATION).test(options.assetPath)) {\n            const slashPrefix = options.assetPath.startsWith(\"/\") ? \"\" : \"/\";\n            options.assetPath = `${NativeAudioWeb.FILE_LOCATION}${slashPrefix}${options.assetPath}`;\n        }\n        const audio = new Audio(options.assetPath);\n        audio.autoplay = false;\n        audio.loop = false;\n        audio.preload = \"auto\";\n        if (options.volume) {\n            audio.volume = options.volume;\n        }\n        NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.set(options.assetId, new AudioAsset(audio));\n    }\n    onEnded(assetId) {\n        this.notifyListeners(\"complete\", { assetId });\n    }\n    async play(options) {\n        const { assetId, time = 0 } = options;\n        const audio = this.getAudioAsset(assetId).audio;\n        await this.stop(options);\n        audio.loop = false;\n        audio.currentTime = time;\n        audio.addEventListener(\"ended\", () => this.onEnded(assetId), {\n            once: true,\n        });\n        return audio.play();\n    }\n    async loop(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        await this.stop(options);\n        audio.loop = true;\n        return audio.play();\n    }\n    async stop(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        audio.pause();\n        audio.loop = false;\n        audio.currentTime = 0;\n    }\n    async unload(options) {\n        await this.stop(options);\n        NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.delete(options.assetId);\n    }\n    async setVolume(options) {\n        if (typeof (options === null || options === void 0 ? void 0 : options.volume) !== \"number\") {\n            throw \"no volume provided\";\n        }\n        const audio = this.getAudioAsset(options.assetId).audio;\n        audio.volume = options.volume;\n    }\n    async setRate(options) {\n        if (typeof (options === null || options === void 0 ? void 0 : options.rate) !== \"number\") {\n            throw \"no rate provided\";\n        }\n        const audio = this.getAudioAsset(options.assetId).audio;\n        audio.playbackRate = options.rate;\n    }\n    async isPlaying(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        return { isPlaying: !audio.paused };\n    }\n    getAudioAsset(assetId) {\n        this.checkAssetId(assetId);\n        if (!NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.has(assetId)) {\n            throw `no asset for assetId \"${assetId}\" available. Call preload first!`;\n        }\n        return NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.get(assetId);\n    }\n    checkAssetId(assetId) {\n        if (typeof assetId !== \"string\") {\n            throw \"assetId must be a string\";\n        }\n        if (!(assetId === null || assetId === void 0 ? void 0 : assetId.length)) {\n            throw \"no assetId provided\";\n        }\n    }\n}\nNativeAudioWeb.FILE_LOCATION = \"\";\nNativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID = new Map();\nconst NativeAudio = new NativeAudioWeb();\nexport { NativeAudio };\n//# sourceMappingURL=web.js.map"],"names":["AudioAsset","constructor","audio","this","NativeAudioWeb","super","resume","options","getAudioAsset","assetId","paused","play","pause","getCurrentTime","currentTime","getDuration","Number","isNaN","duration","isFinite","configure","JSON","stringify","isPreloaded","found","e","preload","_a","AUDIO_ASSET_BY_ASSET_ID","has","assetPath","length","isUrl","RegExp","FILE_LOCATION","test","slashPrefix","startsWith","Audio","autoplay","loop","volume","set","onEnded","notifyListeners","time","stop","addEventListener","once","unload","delete","setVolume","setRate","rate","playbackRate","isPlaying","checkAssetId","get","Map","NativeAudio"],"sourceRoot":""}